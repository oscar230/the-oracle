#!/usr/bin/env python3
# This will run k-fold tests on the results generated by analyzer.py
# Provide a .csv file with test data

import os
import sys
import time
import logging
import csv
import matplotlib.pyplot as plt

#
#   LOGGER
#

log_format = "%(asctime)s %(name)s [%(levelname)s] %(message)s" # From exitmap by Philipp Winter
logging.basicConfig(format=log_format, level=logging.DEBUG)
log = logging.getLogger("visualizer")

#
#   LOAD FROM CSV
#

def read_csv(path):
    data = []
    with open(path, mode='r') as csv_file:
        for line in csv.DictReader(csv_file):
            data.append(line)
    return data

#
#   RESULT LIST OPERATIOSN
#

def get_methods(data):
    return set([x["method"] for x in data])

def get_data_by_method(data, methods=list()):
    t = time.time()
    if len(methods) == 0:
        methods = get_methods(data)
    output = []
    # N^2 TODO improve
    for method in methods:
        output.append([x for x in data if x["method"] == method])
        if time.time() - t > 10:
            t = time.time()
            log.debug("Divide data by method. " + str(len(methods) - len(output)) + " left.")
    return output

def get_cs(data):
    return set([x["C"] for x in data])

def get_data_by_c(data, cs=list()):
    t = time.time()
    if len(cs) == 0:
        cs = get_cs(data)
    output = []
    # N^2 TODO improve
    for c in cs:
        output.append([x for x in data if x["C"] == c])
        if time.time() - t > 10:
            t = time.time()
            log.debug("Divide data by C. " + str(len(cs) - len(output)) + " left.")
    return output

#
#   VISUALIZER
#

def visualizer(data):
    log.debug("Visualizer got " + str(len(data)) + " rows of data.")

    plt.xlabel('False Positive Rate (FPR)')
    plt.ylabel('True Positive Rate (TPR)')
    plt.title("The Oracle - plotting " + str(len(get_methods(data))) + " methods, len(C)=" + str(len(get_cs(get_data_by_method(data).pop()))) + ".")

    lines = ["o", "v", "^", "<", ">", "s", "P", "*", "X", "D", "d"]

    i = 0
    for data_by_method in get_data_by_method(data):
        method = get_methods(data_by_method).pop()
        log.debug("Method " + str(method) + " with " + str(len(data_by_method)) + " rows of data.")
        x = [float(z["FPR"]) for z in data_by_method] # X axis is FPR
        y = [float(z["TPR"]) for z in data_by_method] # Y axis is TPR
        plt.scatter(x=x, y=y, label=str(method), marker=str(lines[i]))
        x = sorted(x)
        y = sorted(y)
        plt.plot(x, y)
        i += 1

    plt.scatter(x=[0], y=[1], color="0", label="Perfect Classifier") # Optimal point
    plt.plot([0,1],[0,1], color="0", label="Random Classifier") # Random rate

    plt.autoscale()
    plt.legend()
    plt.show()

#
#   BOOSTRAP ANALYZER
#

if __name__ == "__main__":
    try:
        if os.path.isfile(str(sys.argv[1])):
            t = time.time()
            log.info("Reading data from " + str(sys.argv[1]))
            data = read_csv(str(sys.argv[1]))
            log.info("Read data sucessfully, took " + str(float(time.time() - t))[0:5] + " seconds.")
        else:
            log.error("Provide a CSV file as first command line arguemnt.")
            exit(-1)
    except Exception as ex:
        log.error("\u001b[31mReading CSV file as input failed with error " + str(ex) + "\u001b[0m")
        exit(-1)
    else:
        log.info("Visualizing " + str(len(data)) + " rows of data.")
        try:
            visualizer(data)
        except Exception as ex:
            log.error("Visualizer error " + str(ex))
    finally:
        log.info("Visualization done, exiting.")
        exit(0)